{\rtf1\ansi\ansicpg1250\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh13620\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 1. After reading instructions and having some good time with example project,i\'92ve started to set up my own environment for Berlin Clock project\
2. Then i\'92ve set up jBehave and added acceptance tests to berlin-clock.story\
3. Then i\'92ve added Unit tests which based on acceptance tests\
4. Coding:\
	- At beginning, i was thinking if making this project heavy OO, with classes for time parts, etc. or 	to make simple class with one public method. I choose to Keep It Simple Son! so i made one class.\
	- Because using String as input was forced, i had to split it and was hoping it will work correctly, i\'92ve decided to add check to input format, if i will have enough time.\
	- I\'92ve implemented convertTime method first, to be sure to not forget anthing later.\
	- I\'92ve made static final strings with \'84display\'94 rows, to make sure it will be easily maintenanced\
5. Afted code was implemented i\'92ve made short review to check if it looks nice.\
6. Building with Gradle showed no errors, so i\'92ve added aTime format check and some negative unit tests.\
\
Feelings:\
Task in terms of code, looked quite easy, it took short time to find solution with division/modulo way. More problematic for me was setting up jBehave to run, at first i didn\'92t notice berlin-clock.story file, and tried to run my own. \
But after managing with issues connected to environment, i focused on finishing task and implementation.}